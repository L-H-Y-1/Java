package JZ;

/*
    剑指 Offer 20. 表示数值的字符串

        请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。
        数值（按顺序）可以分成以下几个部分：
            若干空格
            一个 小数 或者 整数
            （可选）一个 'e' 或 'E' ，后面跟着一个 整数
            若干空格
        小数（按顺序）可以分成以下几个部分：
            （可选）一个符号字符（'+' 或 '-'）
            下述格式之一：
                至少一位数字，后面跟着一个点 '.'
                至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字
                一个点 '.' ，后面跟着至少一位数字
        整数（按顺序）可以分成以下几个部分：
            （可选）一个符号字符（'+' 或 '-'）
            至少一位数字
        部分数值列举如下：
            ["+100", "5e2", "-123", "3.1416", "-1E-16", "0123"]
        部分非数值列举如下：
            ["12e", "1a3.14", "1.2.3", "+-5", "12e+5.4"]

    解题思路

        1. 去除前后空格
        2. 设字符数组存放s字符,初始化当前下标
        3. 设标记*4 : 是否含有数字,e,符号和小数点

        4. 遍历数组

            1. 取出当前字符
            2. 若当前字符是数字,置标记为真
            3. 若当前字符是e
                1. 若e已经出现过或者e前无数字,不可能为数值
                2. 若e首次出现过且e前有数字,置标记为真,其他标记为假
                    即剪去e及前面数字,判断子串是否为整数(e后必须跟整数)
            4. 若当前字符是符号
                1. 由于符号必须在首位且只能出现一次,故若出现过符号或数字或'.',不可能为数值
                2. 否则置标记为真
            5. 若当前字符是'.'
                1. 若出现过'.'或e,不可能为数值(e后必须跟整数)
                2. 否则置标记为真
            6. 若当前字符是空格,退出循环
            7. 若当前字符是其他,不可能为数值
            8. index后移

        5. 遍历结束(index==s.length())
            1. 若数字标记为真,表示s为数值
                即:s中存在数字(不全为符号),或者出现了e,e后有整数(e后若有'.',前面就返回false了)
            2. 若index!=s.length(),即数值中间存在空格,非法

*/

public class JZ20 {

    public boolean isNumber(String s) {

        // 去除前后空格
        s = s.trim();

        // 设字符数组存放s字符,初始化当前下标
        char[] array = s.toCharArray();
        int len = array.length;
        int index = 0;

        // 设标记*4 : 是否含有数字,e,符号和小数点
        boolean hasNum = false, hasE = false,hasSign = false, hasDot = false;

        // 遍历数组
        while (index < len){

            // 取出当前字符
            char c = array[index];

            if ( c<='9' && c>='0' ){
                // 若当前字符是数字,置标记为真
                hasNum = true;
            }else if ( c=='e' || c=='E'){
                // 若当前字符是e
                if ( hasE || !hasNum){
                    // 若e已经出现过或者e前无数字,不可能为数值
                    return false;
                }else {
                    // 若e首次出现过且e前有数字,置标记为真,其他标记为假
                    // 即剪去e及前面数字,判断子串是否为整数(e后必须跟整数)
                    hasE = true;
                    hasDot = false;
                    hasNum = false;
                    hasSign = false;
                }
            }else if ( c=='+' || c=='-'){
                // 若当前字符是符号
                if ( hasSign || hasNum || hasDot){
                    // 由于符号必须在首首位且只能出现一次
                    // 故若出现过符号或数字或'.',不可能为数值
                    return false;
                }
                // 否则置标记为真
                hasSign = true;
            }else if ( c=='.'){
                // 若当前字符是'.'
                if ( hasDot || hasE ){
                    // 若出现过'.'或e,不可能为数值(e后必须跟整数)
                    return false;
                }
                // 否则置标记为真
                hasDot = true;
            }else if ( c==' ' ){
                // 若当前字符是空格,退出循环
                break;
            }else {
                // 若当前字符非法,不可能为数值
                return false;
            }

            // index后移
            index++;

        }

        // 遍历结束
        // 若index!=s.length(),即数值中间存在空格,非法
        // 若数字标记为真,表示s为数值
        // 即:s中存在数字(不全为符号),或者出现了e,e后有整数(e后若有'.',前面就返回false了)
        return hasNum && index==s.length();

    }

}
